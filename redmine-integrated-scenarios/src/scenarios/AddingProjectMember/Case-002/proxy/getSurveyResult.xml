<?xml version="1.0" encoding="UTF-8"?>
<proxy xmlns="http://ws.apache.org/ns/synapse"
       name="getSurveyResult"
       transports="https,http"
       statistics="disable"
       trace="disable"
       startOnLoad="true">
    <target>
        <inSequence onError="faultHandlerSeq">
            <property name="username" expression="json-eval($.username)"/>
            <property name="oauthAccessToken" expression="json-eval($.oauthAccessToken)"/>
            <property name="surveymonkeyApiUrl" expression="json-eval($.surveymonkeyApiUrl)"/>
            <property name="surveymonkeyAccessToken"
                      expression="json-eval($.surveymonkeyAccessToken)"/>
            <property name="surveymonkeyApiKey" expression="json-eval($.surveymonkeyApiKey)"/>
            <property name="redmineApiUrl" expression="json-eval($.redmineApiUrl)"/>
            <property name="redmineApiKey" expression="json-eval($.redmineApiKey)"/>
            <property name="responseType" expression="json-eval($.responseType)"/>
            <property name="recipientsIndex" value="0" scope="operation"/>
            <surveymonkey.init>
                <accessToken>{$ctx:surveymonkeyAccessToken}</accessToken>
                <apiUrl>{$ctx:surveymonkeyApiUrl}</apiUrl>
                <apiKey>{$ctx:surveymonkeyApiKey}</apiKey>
            </surveymonkey.init>
            <redmine.init>
                <apiUrl>{$ctx:redmineApiUrl}</apiUrl>
                <apiKey>{$ctx:redmineApiKey}</apiKey>
                <responseType>{$ctx:responseType}</responseType>
            </redmine.init>
            <redmine.listProjects/>
            <property name="projectsCount" expression="count(//projects)"/>
            <property name="textContent"
                      value="Hi,&lt;br /&gt;Please find the survey result here, This depicts the projects and the number of people who appreciated them.&lt;br /&gt;"/>
            <iterate continueParent="true"
                     id="projectsIterator"
                     preservePayload="true"
                     expression="//projects"
                     sequential="true">
                <target>
                    <sequence>
                        <property name="projectId" expression="//id/text()"/>
                        <property name="survemonkeySurveyTitle"
                                  expression="fn:concat('Redmine project ', get-property('projectId'))"/>
                        <surveymonkey.init>
                            <accessToken>{$ctx:surveymonkeyAccessToken}</accessToken>
                            <apiUrl>{$ctx:surveymonkeyApiUrl}</apiUrl>
                            <apiKey>{$ctx:surveymonkeyApiKey}</apiKey>
                        </surveymonkey.init>
                        <surveymonkey.getSurveyList>
                            <title>{$ctx:survemonkeySurveyTitle}</title>
                        </surveymonkey.getSurveyList>
                        <property name="getSurveyListStatusCode" expression="$axis2:HTTP_SC"/>
                        <filter source="get-property('getSurveyListStatusCode') = 200" regex="true">
                            <then>
                                <property name="surveyId" expression="//survey_id/text()"/>
                                <surveymonkey.init>
                                    <accessToken>{$ctx:surveymonkeyAccessToken}</accessToken>
                                    <apiUrl>{$ctx:surveymonkeyApiUrl}</apiUrl>
                                    <apiKey>{$ctx:surveymonkeyApiKey}</apiKey>
                                </surveymonkey.init>
                                <surveymonkey.getSurveyDetails>
                                    <surveyId>{$ctx:surveyId}</surveyId>
                                </surveymonkey.getSurveyDetails>
                                <property name="numberOfResponses"
                                          expression="//num_responses/text()"
                                          scope="operation"/>
                                <filter xpath="0 != get-property('operation', 'numberOfResponses')">
                                    <then>
                                        <redmine.init>
                                            <apiUrl>{$ctx:redmineApiUrl}</apiUrl>
                                            <apiKey>{$ctx:redmineApiKey}</apiKey>
                                            <responseType>{$ctx:responseType}</responseType>
                                        </redmine.init>
                                        <redmine.getProject>
                                            <id>{$ctx:projectId}</id>
                                            <include>{$ctx:include}</include>
                                        </redmine.getProject>
                                        <property name="projectName" expression="//name/text()" scope="operation"/>
                                        <property name="textContent"
                                                  expression="fn:concat(get-property('textContent'),get-property('operation', 'projectName'),':-',get-property('operation', 'numberOfResponses'))"/>
                                    </then>
                                </filter>
                            </then>
                        </filter>
                        <redmine.init>
                            <apiUrl>{$ctx:redmineApiUrl}</apiUrl>
                            <apiKey>{$ctx:redmineApiKey}</apiKey>
                            <responseType>{$ctx:responseType}</responseType>
                        </redmine.init>
                        <redmine.getIssueCategories>
                            <projectId>{$ctx:projectId}</projectId>
                        </redmine.getIssueCategories>
                        <property name="getIssueCategoriesStatusCode" expression="$axis2:HTTP_SC"/>
                        <filter source="get-property('getIssueCategoriesStatusCode') = 200"
                                regex="true">
                            <then>
                                <property name="recipientsCount" expression="count(//issue_categories)"/>
                                <iterate continueParent="true"
                                         id="assigneesIterator"
                                         preservePayload="true"
                                         expression="//issue_categories"
                                         sequential="true">
                                    <target>
                                        <sequence>
                                            <property name="assignedTo" expression="//assigned_to"/>
                                            <filter xpath="(get-property('assignedTo'))">
                                                <then>
                                                    <property name="assignedId" expression="//assigned_to/id/text()"/>
                                                    <filter xpath="(not(get-property('assignedId') = '' or (not(string(get-property('assignedId'))))))">
                                                        <then>
                                                            <redmine.init>
                                                                <apiUrl>{$ctx:redmineApiUrl}</apiUrl>
                                                                <apiKey>{$ctx:redmineApiKey}</apiKey>
                                                                <responseType>{$ctx:responseType}</responseType>
                                                            </redmine.init>
                                                            <redmine.getUser>
                                                                <userId>{$ctx:assignedId}</userId>
                                                                <include>{$ctx:include}</include>
                                                            </redmine.getUser>
                                                            <property name="assigneeEmail" expression="//mail/text()"/>
                                                            <filter xpath="(not(get-property('assigneeEmail') = '' or (not(string(get-property('assigneeEmail'))))))">
                                                                <then>
                                                                    <property name="toRecipients"
                                                                              expression="fn:concat(get-property('toRecipients'),get-property('assigneeEmail'),',')"/>
                                                                </then>
                                                            </filter>
                                                        </then>
                                                    </filter>
                                                </then>
                                            </filter>
                                            <property name="recipientsIndex"
                                                      expression="get-property('operation','recipientsIndex') + 1"
                                                      scope="operation"/>
                                        </sequence>
                                    </target>
                                </iterate>
                            </then>
                        </filter>
                        <property name="projectId" value=""/>
                    </sequence>
                </target>
            </iterate>
            <filter xpath="(get-property('toRecipients') = '' or (not(string(get-property('toRecipients'))))) and get-property('operation', 'recipientsIndex')=get-property('recipientsCount')">
                <then>
                    <property name="message" value="Unable to send the mail (Recipient is empty)."/>
                    <call-template target="responseHandlerTemplate">
                        <with-param name="activity" value="gmail.sendMail"/>
                        <with-param name="id" value="{$ctx:id}"/>
                        <with-param name="status" value="Error"/>
                        <with-param name="message" value="{$ctx:message}"/>
                    </call-template>
                    <loopback/>
                </then>
            </filter>
            <filter xpath="not(get-property('toRecipients') = '' or (not(string(get-property('toRecipients')))))">
                <then>
                    <filter xpath="(not(get-property('textContent') = '' or (not(string(get-property('textContent'))))))">
                        <then>
                            <filter xpath="(not(get-property('toRecipients') = '' or (not(string(get-property('toRecipients'))))))">
                                <then>
                                    <call-template target="sendSurveyResult">
                                        <with-param name="toRecipients" value="{$ctx:toRecipients}"/>
                                        <with-param name="textContent" value="{$ctx:textContent}"/>
                                        <with-param name="username" value="{$ctx:username}"/>
                                        <with-param name="oauthAccessToken" value="{$ctx:oauthAccessToken}"/>
                                    </call-template>
                                    <loopback/>
                                </then>
                                <else>
                                    <property name="message" value="Unable to send the mail (Recipient is empty)."/>
                                    <call-template target="responseHandlerTemplate">
                                        <with-param name="activity" value="gmail.sendMail"/>
                                        <with-param name="id" value="{$ctx:id}"/>
                                        <with-param name="status" value="Error"/>
                                        <with-param name="message" value="{$ctx:message}"/>
                                    </call-template>
                                    <loopback/>
                                </else>
                            </filter>
                        </then>
                        <else>
                            <property name="message" value="Unable to send the mail (Message is empty)."/>
                            <call-template target="responseHandlerTemplate">
                                <with-param name="activity" value="gmail.sendMail"/>
                                <with-param name="id" value="{$ctx:id}"/>
                                <with-param name="status" value="Error"/>
                                <with-param name="message" value="{$ctx:message}"/>
                            </call-template>
                            <loopback/>
                        </else>
                    </filter>
                </then>
            </filter>
        </inSequence>
        <outSequence>
            <property name="messageType" value="application/json" scope="axis2"/>
            <payloadFactory media-type="json">
                <format>
                    {
                    "Response":{
                    "process":"sendSurveyResult",
                    "activityResponse":[$1]
                    }
                    }
                </format>
                <args>
                    <arg evaluator="xml"
                         expression="get-property('operation', 'responseString')"/>
                </args>
            </payloadFactory>
            <send/>
        </outSequence>
    </target>
    <description/>
</proxy>